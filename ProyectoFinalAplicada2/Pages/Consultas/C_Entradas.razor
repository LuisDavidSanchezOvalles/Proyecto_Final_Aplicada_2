@page "/consultaEntradas"

@using BLL;
@using Models;
@using Reportes;
@using Paginacion;

@inject IToastService toast
@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView>
    <NotAuthorized>
        <p class="h4 text-center">Usted no esta autorizado para acceder a esta pagina</p>

    </NotAuthorized>
</AuthorizeView>

@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated)
{
    <div class="card">
        <div class="card-header">
            <h1>Consulta de Entradas</h1>
        </div>

        <div class="card-body">
            <form>
                <div class="col">
                    <label>Filtro</label>
                    <select class="form-control" @bind="Filtro">
                        <option value="0" disabled selected>Seleccione un Filtro</option>
                        <option value="1">EntradaId</option>
                        <option value="2">SuplidorId</option>
                        <option value="3">CacaoId</option>
                        <option value="4">UsuarioId</option>
                    </select>
                </div>

                <div class="col">
                    <div class="form-group">
                        <label>Criterio</label>
                        <div class="input-group">
                            <input type="text" @bind="Criterio" class="form-control">
                            <div class="input-group-append">
                                <button type="button" class="btn btn-primary input-group-text" @onclick="(u => Consultar(0))"><i class="oi oi-list-rich" /> Consultar</button>
                            </div>
                        </div>
                    </div>
                </div>

                @*La Tabla*@
                <div class="table-responsive text-nowrap" style="position: relative; height:200px; overflow: auto; display: block;">
                    <table class="table table-striped">
                        <thead class="thead-light">
                            <tr>
                                <th>EntradaId</th>
                                <th>SuplidorId</th>
                                <th>Nombres</th>
                                <th>CacaoId</th>
                                <th>Tipo</th>
                                <th>Cantidad</th>
                                <th>Costo</th>
                                <th>Total</th>
                                <th>UsuarioId</th>
                            </tr>
                        </thead>
                        @*Asignacion de Datos*@
                        <tbody class="bg-white">
                            @foreach (var item in ListaEntradas)
                            {
                                <tr>
                                    <td>@item.EntradaId</td>
                                    <td>@item.SuplidorId</td>
                                    <td>@ObtenerNombre(item.SuplidorId)</td>
                                    <td>@item.CacaoId</td>
                                    <td>@ObtenerTipo(item.CacaoId)</td>
                                    <td>@item.Cantidad.ToString("n2")</td>
                                    <td>@item.Costo.ToString("n2")</td>
                                    <td>@item.Total.ToString("n2")</td>
                                    <td>@item.UsuarioId</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </form>
        </div>

        <div class="form-group text-center" display: inline-block>
            <nav aria-label="Page navigation example">
                <ul class="pagination justify-content-center">
                    <li class="page-item">
                        <button class="page-link btn btn-primary"
                                @onclick="@(e => NavegateTo("Anterior"))" tabindex="-1">
                            Anterior
                        </button>
                    </li>

                    @for (int i = 0; i < TotalPaginas; i++)
                    {
                        var NumeroPagina = i;
                        <li class="page-item">
                            <button class="@(pagina.pagina == NumeroPagina ? "page-link btn btn-dark" : "page-link btn btn-danger")"
                                    @onclick="@(u => Consultar(NumeroPagina))">
                                @(i + 1)
                            </button>
                        </li>
                    }

                    <li class="page-item">
                        <button type="button" class="page-link btn btn-primary" @onclick="@(e => NavegateTo("Siguiente"))" tabindex="-1">Siguiente</button>
                    </li>
                </ul>
            </nav>
        </div>

        <div class="card-footer">
            <div class="form-group text-center">
                <button class="btn btn-lg btn-primary oi oi-file" @onclick="GenerarReporte"> Generar Reporte</button>
            </div>

            <form>
                @if (Data is { })
                {
                    <object data="@pdfContent" width="1000" height="500"></object>
                }
            </form>
        </div>
    </div>
}

@code {
    private List<Entradas> ListaEntradas { get; set; }
    private List<Entradas> AuxListaEntradas { get; set; }

    Paginas pagina = new Paginas();

    public string Filtro { get; set; }

    public string Criterio { get; set; }

    private int Numeracion { get; set; }
    private int TotalPaginas { get; set; }

    byte[] Data;
    string pdfContent = "";

    protected override void OnInitialized()
    {
        Nuevo();
    }

    private void Nuevo()
    {
        ListaEntradas = new List<Entradas>();
        AuxListaEntradas = new List<Entradas>();
        Filtro = "0";
        Criterio = string.Empty;
    }

    private string ObtenerNombre(int id)
    {
        Suplidores suplidor = SuplidoresBLL.Buscar(id);

        return suplidor.Nombres;
    }

    private string ObtenerTipo(int id)
    {
        Cacaos cacao = CacaosBLL.Buscar(id);

        return cacao.Tipo;
    }

    public void Consultar(int pag)
    {
        switch (Filtro)
        {
            case "0": //Todo
                ListaEntradas = EntradasBLL.GetList(e => true);
                break;
            case "1": //EntradaId
                if (Criterio.Trim().Length > 0)
                {
                    try
                    {
                        int id = Convert.ToInt32(Criterio);
                        ListaEntradas = EntradasBLL.GetList(e => e.EntradaId == id);
                    }
                    catch (FormatException)
                    {
                        toast.ShowWarning("Ingrese un número");
                    }
                }
                else
                {
                    ListaEntradas = EntradasBLL.GetList(e => true).OrderBy(e => e.EntradaId).ToList();
                }
                break;
            case "2": //SuplidorId
                if (Criterio.Trim().Length > 0)
                {
                    try
                    {
                        int id = Convert.ToInt32(Criterio);
                        ListaEntradas = EntradasBLL.GetList(e => e.SuplidorId == id);
                    }
                    catch (FormatException)
                    {
                        toast.ShowWarning("Ingrese un número");
                    }
                }
                else
                {
                    ListaEntradas = EntradasBLL.GetList(e => true).OrderBy(e => e.SuplidorId).ToList();
                }
                break;
            case "3": //CacaoId
                if (Criterio.Trim().Length > 0)
                {
                    try
                    {
                        int id = Convert.ToInt32(Criterio);
                        ListaEntradas = EntradasBLL.GetList(e => e.CacaoId == id);
                    }
                    catch (FormatException)
                    {
                        toast.ShowWarning("Ingrese un número");
                    }
                }
                else
                {
                    ListaEntradas = EntradasBLL.GetList(e => true).OrderBy(e => e.CacaoId).ToList();
                }
                break;
            case "4": //UsuarioId
                if (Criterio.Trim().Length > 0)
                {
                    try
                    {
                        int usuarioId = Convert.ToInt32(Criterio);
                        ListaEntradas = EntradasBLL.GetList(e => e.UsuarioId == usuarioId);
                    }
                    catch (FormatException)
                    {
                        toast.ShowWarning("Ingrese un número");
                    }
                }
                else
                {
                    ListaEntradas = EntradasBLL.GetList(e => true).OrderBy(e => e.UsuarioId).ToList();
                }
                break;
        }
        TotalPaginas = (int)Math.Ceiling(ListaEntradas.Count() / (decimal)pagina.mostrarCantidad);
        ActualizarLista(pag);

        Filtro = "0";
    }

    private void ActualizarLista(int NumeroPagina)
    {
        AuxListaEntradas = ListaEntradas.Skip(NumeroPagina * pagina.mostrarCantidad).Take(pagina.mostrarCantidad).ToList();
        pagina.pagina = NumeroPagina;
    }

    private void NavegateTo(string direccion)
    {
        if (direccion == "Anterior" && pagina.pagina != 0)
            pagina.pagina -= 1;
        if (direccion == "Siguiente" && pagina.pagina != TotalPaginas)
            pagina.pagina += 1;

        ActualizarLista(pagina.pagina);
    }

    private void GenerarReporte()
    {
        EntradasReport entradas = new EntradasReport();

        Data = entradas.Reporte(AuxListaEntradas);

        pdfContent = "data:application/pdf;base64,";
        pdfContent += System.Convert.ToBase64String(Data);
    }
}