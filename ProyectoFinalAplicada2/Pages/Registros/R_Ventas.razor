@page "/Ventas"
@page "/Ventas/{VentaId:int}"

@using Models
@using BLL
@using System.Web;
@using System.Security.Claims;

@inject IToastService toast
@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView>
    <NotAuthorized>
        <p class="h4 text-center">Usted no esta autorizado para acceder a esta pagina</p>

    </NotAuthorized>
</AuthorizeView>

@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated)
{

    <EditForm Model="Venta" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
        <div class="card">
            <div class="card-header">
                <h3>Registro de Venta</h3>
            </div>

            <div class="card-body">
                <form>

                    @*VentaId*@
                    <div class="form-row align-items-center">
                        <div class="col">
                            <div class="form-group">
                                <label>VentaId</label>
                                <div class="input-group">
                                    <InputNumber @bind-Value="Venta.VentaId" class="form-control col-4" />
                                    <div class="input-group-append">
                                        <button type="button" class="btn btn-primary input-group-text" @onclick="Buscar"><i class="oi oi-magnifying-glass" /> Buscar</button>
                                    </div>
                                </div>
                                <ValidationMessage For="@(() => Venta.VentaId)" />
                            </div>
                        </div>
                    </div>

                    @*Fecha*@
                    <div class="form-group">
                        <label>Fecha</label>
                        <InputDate @bind-Value="Venta.Fecha" class="form-control" />
                        <ValidationMessage For="@(() => Venta.Fecha)" />
                    </div>

                    @*Clientes Existentes*@
                    <div class="form-group">
                        <div class="form-row">
                            <div class="col">
                                <label>Cliente</label>
                                <select class="form-control" @bind="Venta.ClienteId" @onfocusout="ObtenerContratos">
                                    <option value="" disabled selected>Clientes Disponibles</option>
                                    @foreach (var item in ListaClientes)
                                    {
                                        <option value="@item.ClienteId">Id: @item.ClienteId a Nombre de: @item.Nombres</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>

                    @*Total*@
                    <div class="form-group">
                        <label>Total</label>
                        <InputNumber @bind-Value="Venta.Total" class="form-control" readonly="true" />
                    </div>

                    @*Balance*@
                    <div class="form-group">
                        <label>Balance</label>
                        <InputNumber @bind-Value="Venta.Balance" class="form-control" readonly="true" />
                    </div>

                    @*Contratos Existentes*@
                    <div class="form-group">
                        <div class="form-row">
                            <div class="col">
                                <label>Contrato</label>
                                <select class="form-control" @bind="SeleccionContrato" @onfocusout="ObtenerCantidadPendiente">
                                    <option value="" disabled selected>Tipos de Cacaos Disponibles</option>
                                    @foreach (var item in ListaContratos)
                                    {
                                        <option value="@item.ContratoId">Id:@item.ContratoId</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>

                    @*CantidadPendiente*@
                    <div class="form-group">
                        <label>Cantidad Pendiente</label>
                        <div class="row">
                            <div class="col">
                                <InputNumber @bind-Value="CantidadPendiente" class="form-control" readonly="true" />
                            </div>
                            <div class="col-2">
                                <div class="row">
                                    <label>Fecha Creación</label>
                                </div>
                                <div class="row">
                                    <label>@Venta.FechaCreacion.ToString("dd/MM/yyyy")</label>
                                </div>
                            </div>
                        </div>
                    </div>

                    @*Cantidad*@
                    <div class="form-group">
                        <label>-Agregar Venta-</label>
                    </div>
                    <div class="row">
                        <div class="form-group col-4">
                            <label>Cantidad</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="Cantidad" class="form-control"/>
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-primary input-group-text" @onclick="AgregarDetalle"><i class="oi oi-plus" /> Agregar</button>
                                </div>
                            </div>
                        </div>
                        <div class="col-2 offset-6">
                            <div class="row">
                                <label>Fecha Modificación</label>
                            </div>
                            <div class="row">
                                <label>@Venta.FechaModificacion.ToString("dd/MM/yyyy")</label>
                            </div>
                        </div>
                    </div>


                    @*Detalle*@
                    @*La Tabla*@
                    <div class="table-responsive text-nowrap" style="position: relative; height:200px; overflow: auto; display: block;">
                        <table class="table table-striped">
                            <thead class="thead-light">
                                <tr>
                                    <th>Cantidad</th>
                                    <th>Importe</th>
                                    <th>Total</th>
                                </tr>
                            </thead>
                            <tbody class="bg-white">
                                @for (int i = 0; i < Venta.VentaDetalle.Count; i++)
                                {
                                    int index = i;
                                    <tr>
                                        <td>@Venta.VentaDetalle[i].Cantidad</td>
                                        <td>@Venta.VentaDetalle[i].Precio</td>
                                        <td>@(Venta.VentaDetalle[i].Precio * Venta.VentaDetalle[i].Cantidad)</td>
                                        <td><button type="button" class="btn btn-outline-danger oi oi-minus" @onclick="(() => RemoverFila(index))"> Remover</button></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    @*Creado por*@
                    <div class="form-group">
                        <div>
                            <label>Creado Por</label>
                        </div>
                        <div>
                            <label>@nombreUsuarioCreacion</label>
                        </div>
                    </div>

                </form>
            </div>

            <div class="card-footer">
                <div class="form-group text-center" display: inline-block>
                    <button type="button" class="btn btn-lg btn-primary oi oi-file" @onclick="Nuevo"> Nuevo</button>
                    <button type="submit" class="btn btn-lg btn-success oi oi-cloud-upload"> Guardar</button>
                    <button type="button" class="btn btn-lg btn-danger oi oi-trash" @onclick="Eliminar"> Eliminar</button>
                </div>
            </div>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public int VentaId { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> authState { get; set; }
    private int SeleccionContrato { get; set; }
    public string nombreUsuarioCreacion { get; set; } = "";
    public string usuarioIdCreacion { get; set; } = "";
    private List<Clientes> ListaClientes = new List<Clientes>();
    private List<Contratos> ListaContratos = new List<Contratos>();
    private decimal CantidadPendiente { get; set; }
    private decimal Cantidad { get; set; }

    private Ventas Venta = new Ventas();

    protected override void OnInitialized()
    {
        Nuevo();
        BuscarParametro();

    }

    public void Nuevo()
    {
        Venta = new Ventas();
        SeleccionContrato = 0;
        ListaClientes = ClientesBLL.GetList(s => true);
        ListaContratos.Clear();
        ReiniciarUsuarioCreacion();

        CantidadPendiente = 0.0m;
        Cantidad = 0.0m;
    }

    private async void ReiniciarUsuarioCreacion()
    {
        nombreUsuarioCreacion = (await authState).User.Identity.Name;

        usuarioIdCreacion = (await authState).User.Claims
            .Where(c => c.Type == ClaimTypes.NameIdentifier)
            .Select(c => c.Value).FirstOrDefault();
    }

    private void BuscarParametro()
    {
        if (VentaId > 0)
        {
            var encontrado = VentasBLL.Buscar(VentaId);

            if (encontrado != null)
            {
                this.Venta = encontrado;
                ObtenerClienteContratoSeleccionado();
                AsignarUsuarioCreacion();
                ObtenerCantidadPendiente();
            }
            else
                toast.ShowWarning("No encontrado");
        }
    }

    private void Buscar()
    {
        if (Venta.VentaId > 0)
        {
            var encontrado = VentasBLL.Buscar(Venta.VentaId);

            if (encontrado != null)
            {
                this.Venta = encontrado;
                ObtenerClienteContratoSeleccionado();
                AsignarUsuarioCreacion();
                ObtenerCantidadPendiente();
            }
            else
                toast.ShowWarning("No encontrado");
        }
    }

    private void ObtenerClienteContratoSeleccionado()
    {
        ListaClientes.Clear();
        ListaContratos.Clear();

        Clientes cliente = ClientesBLL.Buscar(Venta.ClienteId);
        Contratos contrato = ContratosBLL.Buscar(Venta.VentaDetalle[0].ContratoId);

        ListaClientes.Add(cliente);
        ListaContratos.Add(contrato);

        SeleccionContrato = 1;
    }

    private void AsignarUsuarioCreacion()
    {
        Usuarios usuarioCreacion = UsuariosBLL.Buscar(Venta.UsuarioId);

        nombreUsuarioCreacion = usuarioCreacion.NombreUsuario;
        usuarioIdCreacion = Venta.UsuarioId.ToString();
    }

    private void ObtenerCantidadPendiente()
    {
        Contratos contrato = ContratosBLL.Buscar(SeleccionContrato);

        if(contrato != null)
        {
            CantidadPendiente = contrato.CantidadPendiente;

            if (Venta.VentaId == 0)
                Venta.VentaDetalle.Clear();
        }
    }

    public void ObtenerContratos()
    {
        if(Venta.VentaId == 0)
        {
            ListaContratos = ContratosBLL.GetList(c => c.ClienteId == Venta.ClienteId);
            SeleccionContrato = ListaContratos[0].ContratoId;
            ObtenerCantidadPendiente();
        }
    }

    public void AgregarDetalle()
    {
        if (SeleccionContrato < 1)
        {
            toast.ShowInfo("Ingrese algun contrato");
            return;
        }

        if(Cantidad <= 0)
        {
            toast.ShowInfo("Ingrese alguna cantidad");
            return;
        }

        if (Cantidad > CantidadPendiente)
        {
            toast.ShowInfo("Ha excedido la cantidad disponible");
            return;
        }

        Venta.VentaDetalle.Add(new VentasDetalle
        {
            VentaDetalleId = 0,
            VentaId = Venta.VentaId,
            ContratoId = SeleccionContrato,
            Cantidad = Cantidad,
            Precio = ObtenerPrecio()
        });

        CalcularVenta();

        Cantidad = 0.0m;
    }

    private void CalcularVenta()
    {
        Venta.Total = 0;
        Venta.Balance = 0;
        Cantidad = 0;

        foreach (var item in Venta.VentaDetalle)
        {
            Venta.Total += item.Cantidad * item.Precio;
            Venta.Balance += item.Cantidad * item.Precio;
            Cantidad += item.Cantidad;
        }

        if(Venta.VentaId > 0)
        {
            if (PagosBLL.ExisteAlgunPago())
            {
                List<Pagos> pagos = PagosBLL.GetList(p => true);

                foreach (var item in pagos)
                {
                    if (item.PagoDetalle[0].VentaId == Venta.VentaId)
                    {
                        Venta.Balance -= item.Total;
                    }
                }
            }
        }

        Contratos contrato = ContratosBLL.Buscar(SeleccionContrato);

        CantidadPendiente = contrato.Cantidad - Cantidad;
    }

    private decimal ObtenerPrecio()
    {
        Contratos contrato = ContratosBLL.Buscar(SeleccionContrato);

        return contrato.Precio;
    }

    public void RemoverFila(int index)
    {
        Venta.VentaDetalle.RemoveAt(index);
        CalcularVenta();
    }

    public void Guardar()
    {
        bool guardo;

        if (Venta.VentaDetalle.Count < 1)
        {
            toast.ShowInfo("Debe ingresar alguna cantidad");
            return;
        }

        if (!VentasBLL.ContratoDisponible(Venta))
        {
            toast.ShowInfo("Ya ha sido utilizada este contrato");
            return;
        }

        Venta.UsuarioId = Convert.ToInt32(usuarioIdCreacion);
        Venta.FechaModificacion = DateTime.Now;

        guardo = VentasBLL.Guardar(Venta);

        if (guardo)
        {
            ContratosBLL.EvaluarCantidad(Venta.VentaDetalle[0].ContratoId, CantidadPendiente);
            Nuevo();
            toast.ShowSuccess("Guardado correctamente");
        }
        else
            toast.ShowError("No fue posible guardar");
    }

    public void Eliminar()
    {
        bool elimino;

        List<Pagos> pagos = PagosBLL.GetList(p => true);

        foreach (var item in pagos)
        {
            if (item.PagoDetalle[0].VentaId == Venta.VentaId)
            {
                toast.ShowInfo("No se puede eliminar esta venta ya que tiene un pago");
                return;
            }
        }

        elimino = VentasBLL.Eliminar(Venta.VentaId);

        if (elimino)
        {
            ContratosBLL.RestablecerCantidadPendiente(Venta.VentaDetalle[0].ContratoId);//que pasaria si se elimina todo el detalle antes de eliminar la venta
            Nuevo();
            toast.ShowSuccess("Eliminado correctamente");
        }
        else
            toast.ShowError("No fue posible eliminar");
    }
    }