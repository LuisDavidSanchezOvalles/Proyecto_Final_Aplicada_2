@page "/Ventas"
@page "/Ventas/{VentaId:int}"

@using Models
@using BLL
@using System.Web;
@using System.Security.Claims;

@inject IToastService toast
@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView>
    <NotAuthorized>
        <p class="h4 text-center">Usted no esta autorizado para acceder a esta pagina</p>

    </NotAuthorized>
</AuthorizeView>

@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated)
{

    <EditForm Model="Venta" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
        <div class="card">
            <div class="card-header">
                <h3>Registro de Venta</h3>
            </div>

            <div class="card-body">
                <form>

                    @*VentaId*@
                    <div class="form-row align-items-center">
                        <div class="col">
                            <div class="form-group">
                                <label>ContratoId</label>
                                <div class="input-group">
                                    <InputNumber @bind-Value="Venta.VentaId" class="form-control col-4" />
                                    <div class="input-group-append">
                                        <button type="button" class="btn btn-primary input-group-text" @onclick="Buscar"><i class="oi oi-magnifying-glass" /> Buscar</button>
                                    </div>
                                </div>
                                <ValidationMessage For="@(() => Venta.VentaId)" />
                            </div>
                        </div>
                    </div>

                    @*Fecha*@
                    <div class="form-group">
                        <label>Fecha</label>
                        <InputDate @bind-Value="Venta.Fecha" class="form-control" />
                        <ValidationMessage For="@(() => Venta.Fecha)" />
                    </div>

                    @*Clientes Existentes*@
                    <div class="form-group">
                        <div class="form-row">
                            <div class="col">
                                <label>Cliente</label>
                                <select class="form-control" @bind="Venta.ClienteId">
                                    <option value="" disabled selected>Clientes Disponibles</option>
                                    @foreach (var item in ListaClientes)
                                    {
                                        <option value="@item.ClienteId">Id: @item.ClienteId a Nombre de: @item.Nombres</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>

                    @*Total*@
                    <div class="form-group">
                        <label>Total</label>
                        <InputNumber @bind-Value="Venta.Total" class="form-control" readonly="true" />
                    </div>

                    @*Balance*@
                    <div class="form-group">
                        <label>Balance</label>
                        <InputNumber @bind-Value="Venta.Balance" class="form-control" readonly="true" />
                    </div>

                    @*Contratos Existentes*@
                    @*<div class="form-group">
          <div class="form-row">
              <div class="col">
                  <label>CacaoId</label>
                  <select class="form-control" @bind="SeleccionContrato" @onfocusout="BuscarPrecioEInventario">
                      <option value="" disabled selected>Tipos de Cacaos Disponibles</option>
                      @foreach (var item in ListaContratos)
                      {
                          <option value="@item.ContratoId">Id:@item.ContratoId a Nombre de: @ObtenerNombreCliente(item.ClienteId)</option>
                      }
                  </select>
              </div>
          </div>
        </div>*@

                    @*CantidadPendiente*@
                    <div class="form-group">
                        <label>Cantidad Pendiente</label>
                        <InputNumber @bind-Value="CantidadPendiente" class="form-control" readonly="true" />
                    </div>

                    @*Cantidad*@
                    <div class="form-group">
                        <label>Cantidad</label>
                        <div class="row">
                            <div class="col">
                                <InputNumber @bind-Value="Cantidad" class="form-control" readonly="true" />
                            </div>
                        </div>
                        <ValidationMessage For="@(() => Cantidad)" />
                    </div>

                    @*<div class="form-group" id="tabla">
                        <table class="table table-bordered table-striped">
                            <thead>
                                <tr>
                                    <th>VentaId</th>
                                    <th>ContratoId</th>
                                    <th>Cantidad</th>
                                    <th>Importe</th>
                                    <th>Total</th>
                                </tr>
                            </thead>
                            <tbody>
                                @for (int i = 0; i < Venta.VentaDetalle.Count; i++)
                                {
                                    int index = i;
                                    <tr>
                                        <td>@Venta.VentaDetalle[i].PagoId</td>
                                        <td>@Pago.PagoDetalle[i].VentaId</td>
                                        <td>@Pago.PagoDetalle[i].Monto</td>
                                        <td>@Pago.PagoDetalle[i].Saldo</td>
                                        <td><button type="button" class="btn btn-lg btn-danger" @onclick="@((args) => RemoverFila(index))"><i class="oi oi-minus" /> Remover</button></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>*@

                    <div class="form-group">
                        <label>Creado Por</label>
                        <div class="row">
                            <div class="col">
                                <label>@nombreUsuarioCreacion</label>
                            </div>
                            <div class="col-2">
                                <div class="row">
                                    <label>Fecha Creación</label>
                                </div>
                                <div class="row">
                                    <label>@Venta.FechaCreacion.ToString("dd/MM/yyyy")</label>
                                </div>
                            </div>
                            <div class="col-2">
                                <div class="row">
                                    <label>Fecha Modificación</label>
                                </div>
                                <div class="row">
                                    <label>@Venta.FechaModificacion.ToString("dd/MM/yyyy")</label>
                                </div>
                            </div>
                        </div>
                    </div>

                </form>
            </div>

            <div class="card-footer">
                <div class="form-group text-center" display: inline-block>
                    <button type="button" class="btn btn-lg btn-primary oi oi-file" @onclick="Nuevo"> Nuevo</button>
                    <button type="submit" class="btn btn-lg btn-success oi oi-cloud-upload"> Guardar</button>
                    <button type="button" class="btn btn-lg btn-danger oi oi-trash" @onclick="Eliminar"> Eliminar</button>
                </div>
            </div>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public int VentaId { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> authState { get; set; }
    private int SeleccionContrato { get; set; }
    public string nombreUsuarioCreacion { get; set; } = "";
    public string usuarioIdCreacion { get; set; } = "";
    private List<Clientes> ListaClientes = new List<Clientes>();
    private List<Contratos> ListaContratos = new List<Contratos>();
    private decimal Inventario { get; set; }
    private decimal Total { get; set; }
    private decimal Balance { get; set; }
    private decimal CantidadPendiente { get; set; }
    private decimal Cantidad { get; set; }

    private Ventas Venta = new Ventas();

    protected override void OnInitialized()
    {
        Nuevo();
        BuscarParametro();

    }

    public void Nuevo()
    {
        Venta = new Ventas();
        SeleccionContrato = 0;
        ListaClientes = ClientesBLL.GetList(s => true);
        ListaContratos = ContratosBLL.GetList(c => true);
        ReiniciarUsuarioCreacion();
    }

    private async void ReiniciarUsuarioCreacion()
    {
        nombreUsuarioCreacion = (await authState).User.Identity.Name;

        usuarioIdCreacion = (await authState).User.Claims
            .Where(c => c.Type == ClaimTypes.NameIdentifier)
            .Select(c => c.Value).FirstOrDefault();
    }

    private void BuscarParametro()
    {
        if (VentaId > 0)
        {
            var encontrado = VentasBLL.Buscar(VentaId);

            if (encontrado != null)
                this.Venta = encontrado;
            else
                toast.ShowWarning("No encontrado");
        }
    }

    private void Buscar()
    {
        if (Venta.VentaId > 0)
        {
            var encontrado = VentasBLL.Buscar(Venta.VentaId);

            if (encontrado != null)
                this.Venta = encontrado;
            else
                toast.ShowWarning("No encontrado");
        }
    }

    private void AsignarUsuarioCreacion()
    {
        Usuarios usuarioCreacion = UsuariosBLL.Buscar(Venta.UsuarioId);

        nombreUsuarioCreacion = usuarioCreacion.NombreUsuario;
        usuarioIdCreacion = Venta.UsuarioId.ToString();
    }

    private string ObtenerNombreCliente(int id)
    {
        Clientes cliente = ClientesBLL.Buscar(id);

        return cliente.Nombres;
    }

    private void BuscarPrecioEInventario()
    {
        //Cacaos cacao = CacaosBLL.Buscar(SeleccionContrato);
        //Inventario = cacao.Cantidad;
        //Contrato.Precio = cacao.Precio;
    }

    private void CalcularTotal()
    {
        //Contrato.Total = Contrato.Cantidad * Contrato.Precio;
    }

    public void Guardar()
    {
        bool guardo;

        Venta.UsuarioId = Convert.ToInt32(usuarioIdCreacion);
        Venta.FechaModificacion = DateTime.Now;

        guardo = VentasBLL.Guardar(Venta);

        if (guardo)
        {
            Nuevo();
            toast.ShowSuccess("Guardado correctamente");
        }
        else
            toast.ShowError("No fue posible guardar");
    }

    public void Eliminar()
    {
        bool elimino;

        elimino = VentasBLL.Eliminar(Venta.VentaId);

        if (elimino)
        {
            Nuevo();
            toast.ShowSuccess("Eliminado correctamente");
        }
        else
            toast.ShowError("No fue posible eliminar");
    }
    }