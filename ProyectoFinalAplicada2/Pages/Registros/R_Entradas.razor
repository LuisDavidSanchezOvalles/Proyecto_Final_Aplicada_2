@page "/Entradas"
@page "/Entradas/{EntradaId:int}"

@using Models
@using BLL
@using System.Web;
@using System.Security.Claims;

@inject IToastService toast
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JS

<AuthorizeView>
    <NotAuthorized>
        <p class="h4 text-center">Usted no esta autorizado para acceder a esta pagina</p>

    </NotAuthorized>
</AuthorizeView>

@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated)
{

    <EditForm Model="Entrada" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
        <div class="card">
            <div class="card-header">
                <h3>Registro de Entradas</h3>
            </div>

            <div class="card-body">
                <form>

                    @*EntradaId*@
                    <div class="form-row align-items-center">
                        <div class="col">
                            <div class="form-group">
                                <label>EntradaId</label>
                                <div class="input-group">
                                    <InputNumber readonly="@Activacion" @bind-Value="Entrada.EntradaId" class="form-control col-4" />
                                    <div class="input-group-append">
                                        <button type="button" class="btn btn-primary input-group-text" @onclick="Buscar"><i class="oi oi-magnifying-glass" /> Buscar</button>
                                    </div>
                                </div>
                                <ValidationMessage For="@(() => Entrada.EntradaId)" />
                            </div>
                        </div>
                    </div>

                    @*Fecha*@
                    <div class="form-group">
                        <label>Fecha</label>
                        <InputDate @bind-Value="Entrada.Fecha" class="form-control" />
                        <ValidationMessage For="@(() => Entrada.Fecha)" />
                    </div>

                    @*Suplidores Existentes*@
                    <div class="form-group">
                        <div class="form-row">
                            <div class="col">
                                <label>Suplidor</label>
                                <select class="form-control" @bind="Entrada.SuplidorId">
                                    <option value="" disabled selected>Suplidores Disponibles</option>
                                    @foreach (var item in ListaSuplidores)
                                    {
                                        <option value="@item.SuplidorId">Id: @item.SuplidorId a Nombre de: @item.Nombres</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>

                    @*Cacaos Existentes*@
                    <div class="form-group">
                        <div class="form-row">
                            <div class="col">
                                <label>Cacao</label>
                                <select class="form-control" @bind="Entrada.CacaoId">
                                    <option value="" disabled selected>Tipos de Cacaos Disponibles</option>
                                    @foreach (var item in ListaCacaos)
                                    {
                                        <option value="@item.CacaoId">Id:@item.CacaoId Tipo: @item.Tipo</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>

                    @*Cantidad*@
                    <div class="form-group">
                        <label>Cantidad</label>
                        <InputNumber @bind-Value="Entrada.Cantidad" class="form-control" @onfocusout="CalcularTotal" />
                        <ValidationMessage For="@(() => Entrada.Cantidad)" />
                    </div>

                    @*Costo*@
                    <div class="form-group">
                        <label>Costo</label>
                        <InputNumber @bind-Value="Entrada.Costo" class="form-control" @onfocusout="CalcularTotal" />
                        <ValidationMessage For="@(() => Entrada.Costo)" />
                    </div>

                    @*Total*@
                    <div class="form-group">
                        <label>Total</label>
                        <div class="row">
                            <div class="col">
                                <InputNumber @bind-Value="Entrada.Total" class="form-control" readonly="true" />
                            </div>
                            <div class="col-2">
                                <div class="row">
                                    <label>Fecha Creación</label>
                                </div>
                                <div class="row">
                                    <label>@Entrada.FechaCreacion.ToString("dd/MM/yyyy")</label>
                                </div>
                            </div>
                        </div>
                        <ValidationMessage For="@(() => Entrada.Total)" />
                    </div>

                    @*Creado por*@
                    <div class="form-group">
                        <label>Creado Por</label>
                        <div class="row">
                            <div class="col">
                                <label>@nombreUsuarioCreacion</label>
                            </div>
                            <div class="col-2">
                                <div class="row">
                                    <label>Fecha Modificación</label>
                                </div>
                                <div class="row">
                                    <label>@Entrada.FechaModificacion.ToString("dd/MM/yyyy")</label>
                                </div>
                            </div>
                        </div>
                    </div>

                </form>
            </div>

            <div class="card-footer">
                <div class="form-group text-center" display: inline-block>
                    <button type="button" class="btn btn-lg btn-primary oi oi-file" @onclick="Nuevo"> Nuevo</button>
                    <button type="submit" class="btn btn-lg btn-success oi oi-cloud-upload"> Guardar</button>
                    <button type="button" class="btn btn-lg btn-danger oi oi-trash" @onclick="Eliminar"> Eliminar</button>
                </div>
            </div>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public int EntradaId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authState { get; set; }

    private string nombreUsuarioCreacion { get; set; } = "";
    private string usuarioIdCreacion { get; set; } = "";

    private List<Suplidores> ListaSuplidores = new List<Suplidores>();
    private List<Cacaos> ListaCacaos = new List<Cacaos>();

    private bool Activacion { get; set; }

    private Entradas Entrada = new Entradas();

    protected override void OnInitialized()
    {
        Nuevo();
        BuscarParametro();
    }

    public void Nuevo()
    {
        Entrada = new Entradas();
        ListaSuplidores = SuplidoresBLL.GetList(s => true);
        ListaCacaos = CacaosBLL.GetList(c => true);
        ReiniciarUsuarioCreacion();
        Activacion = false;
    }

    private async void ReiniciarUsuarioCreacion()
    {
        nombreUsuarioCreacion = (await authState).User.Identity.Name;

        usuarioIdCreacion = (await authState).User.Claims
            .Where(c => c.Type == ClaimTypes.NameIdentifier)
            .Select(c => c.Value).FirstOrDefault();
    }

    private void BuscarParametro()
    {
        if (EntradaId > 0)
        {
            var encontrado = EntradasBLL.Buscar(EntradaId);

            if (encontrado != null)
            {
                this.Entrada = encontrado;
                ObtenerSuplidorCacaoSeleccionado();
                AsignarUsuarioCreacion();
                Activacion = true;
            }
            else
                toast.ShowWarning("No encontrado");
        }
    }

    public void Buscar()
    {
        if (Entrada.EntradaId > 0)
        {
            var encontrado = EntradasBLL.Buscar(Entrada.EntradaId);

            if (encontrado != null)
            {
                this.Entrada = encontrado;
                ObtenerSuplidorCacaoSeleccionado();
                AsignarUsuarioCreacion();
                Activacion = true;
            }
            else
                toast.ShowWarning("No encontrado");
        }
    }

    private void ObtenerSuplidorCacaoSeleccionado()
    {
        ListaSuplidores.Clear();
        ListaCacaos.Clear();

        Suplidores suplidor = SuplidoresBLL.Buscar(Entrada.SuplidorId);
        Cacaos cacao = CacaosBLL.Buscar(Entrada.CacaoId);

        ListaSuplidores.Add(suplidor);
        ListaCacaos.Add(cacao);
    }

    private void AsignarUsuarioCreacion()
    {
        Usuarios usuarioCreacion = UsuariosBLL.Buscar(Entrada.UsuarioId);

        nombreUsuarioCreacion = usuarioCreacion.NombreUsuario;
        usuarioIdCreacion = Entrada.UsuarioId.ToString();
    }

    private void CalcularTotal()
    {
        Entrada.Total = Entrada.Cantidad * Entrada.Costo;
    }

    public void Guardar()
    {
        bool guardo = false;

        if (Entrada.SuplidorId <= 0)
        {
            toast.ShowInfo("Debe de seleccionar un suplidor");
            return;
        }

        if (Entrada.CacaoId <= 0)
        {
            toast.ShowInfo("Debe de seleccionar un tipo cacao");
            return;
        }

        Entrada.UsuarioId = Convert.ToInt32(usuarioIdCreacion);
        Entrada.FechaModificacion = DateTime.Now;

        if (CacaosBLL.ActualizarCacao(Entrada))
            guardo = EntradasBLL.Guardar(Entrada);
        else
            toast.ShowInfo("La existencia del cacao resulto menor o igual a cero");

        if (guardo)
        {
            Nuevo();
            toast.ShowSuccess("Guardado correctamente");
        }
        else
            toast.ShowError("No fue posible guardar. Talvez intento modificar un id inexistente.");
    }

    public async Task Eliminar()
    {
        if (await JS.ConfirmDelete("Confirmar", "¿Esta seguro que desea eliminar esta Entrada?", "question"))
        {
            bool elimino;

            elimino = EntradasBLL.Eliminar(Entrada.EntradaId);

            if (elimino)
            {
                Nuevo();
                toast.ShowSuccess("Eliminado correctamente");
            }
            else
                toast.ShowError("No fue posible eliminar");
        }
    }
}