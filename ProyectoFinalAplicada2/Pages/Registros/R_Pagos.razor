@page "/Pagos"
@page "/Pagos/{PagoId:int}"

@using Models
@using BLL
@using System.Web;
@using System.Security.Claims;

@inject IToastService toast
@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView>
    <NotAuthorized>
        <p class="h4 text-center">Usted no esta autorizado para acceder a esta pagina</p>

    </NotAuthorized>
</AuthorizeView>

@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated)
{

    <EditForm Model="Pago" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
        <div class="card">
            <div class="card-header">
                <h3>Registro de Pagos</h3>
            </div>

            <div class="card-body">
                <form>

                    @*PagoId*@
                    <div class="form-row align-items-center">
                        <div class="col">
                            <div class="form-group">
                                <label>PagoId</label>
                                <div class="input-group">
                                    <InputNumber readonly="@Activacion" @bind-Value="Pago.PagoId" class="form-control col-4" />
                                    <div class="input-group-append">
                                        <button type="button" class="btn btn-primary input-group-text" @onclick="Buscar"><i class="oi oi-magnifying-glass" />Buscar</button>
                                    </div>
                                </div>
                                <ValidationMessage For="@(() => Pago.PagoId)" />
                            </div>
                        </div>
                    </div>

                    @*Fecha*@
                    <div class="form-group">
                        <label>Fecha</label>
                        <InputDate @bind-Value="Pago.Fecha" class="form-control" />
                        <ValidationMessage For="@(() => Pago.Fecha)" />
                    </div>

                    @*Clientes*@
                    <div class="form-group">
                        <label>Cliente</label>
                        <select @bind="Pago.ClienteId" class="form-control" @onfocusout="ObtenerVentas">
                            <option value="" disabled selected>Clientes Disponibles</option>
                            @foreach (var item in Clientes)
                            {
                                <option value="@item.ClienteId">Id: @item.ClienteId a Nombre de: @item.Nombres</option>
                            }
                        </select>
                    </div>

                    @*VentaId*@
                    <div class="form-group">
                        <label>VentaId</label>
                        <select @bind="VentaIdSeleccionado" class="form-control" @onfocusout="ObtenerBalance">
                            <option value="" disabled selected>Ventas Disponibles</option>
                            @foreach (var item in Ventas)
                            {
                                <option value="@item.VentaId">@item.VentaId</option>
                            }
                        </select>
                    </div>

                    @*Balance*@
                    <div class="form-group">
                        <label>Balance</label>
                        <InputNumber readonly @bind-Value="Balance" class="form-control" />
                    </div>

                    @*Total*@
                    <div class="form-group">
                        <label>Total</label>
                        <div class="row">
                            <div class="col">
                                <InputNumber readonly @bind-Value="Pago.Total" class="form-control" />
                            </div>
                            <div class="col-2">
                                <div class="row">
                                    <label>Fecha Creación</label>
                                </div>
                                <div class="row">
                                    <label>@Pago.FechaCreacion.ToString("dd/MM/yyyy")</label>
                                </div>
                            </div>
                        </div>
                    </div>

                    @*PagoDetalle*@
                    <div class="form-group">
                        <label>-Agregar Pago-</label>
                    </div>
                    <div class="row">
                        <div class="form-group col-4">
                            <label>Monto</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="Monto" class="form-control" />
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-primary input-group-text" @onclick="AgregarDetalle"><i class="oi oi-plus" /> Agregar</button>
                                </div>
                            </div>
                        </div>
                        <div class="col-2 offset-6">
                            <div class="row">
                                <label>Fecha Modificación</label>
                            </div>
                            <div class="row">
                                <label>@Pago.FechaModificacion.ToString("dd/MM/yyyy")</label>
                            </div>
                        </div>
                    </div>
                    <div class="table-responsive text-nowrap" style="position: relative; height:200px; overflow: auto; display: block;">
                        <table class="table table-striped">
                            <thead class="thead-light">
                                <tr>
                                    <th>Monto</th>
                                    <th>Saldo</th>
                                </tr>
                            </thead>
                            <tbody class="bg-white">
                                @for (int i = 0; i < Pago.PagoDetalle.Count; i++)
                                {
                                    int index = i;
                                    <tr>
                                        <td>@Pago.PagoDetalle[i].Monto</td>
                                        <td>@Pago.PagoDetalle[i].Saldo</td>
                                        <td><button type="button" class="btn btn-outline-danger oi oi-minus" @onclick="(() => RemoverFila(index))"> Remover</button></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    @*Creado por*@
                    <div class="form-group">
                        <div>
                            <label>Creado Por</label>
                        </div>
                        <div>
                            <label>@nombreUsuarioCreacion</label>
                        </div>
                    </div>

                </form>
            </div>
            <div class="card-footer">
                <div class="form-group text-center" display: inline-block>
                    <button type="button" class="btn btn-lg btn-primary oi oi-file" @onclick="Nuevo"> Nuevo</button>
                    <button type="submit" class="btn btn-lg btn-success oi oi-cloud-upload"> Guardar</button>
                    <button type="button" class="btn btn-lg btn-danger oi oi-trash" @onclick="Eliminar"> Eliminar</button>
                </div>
            </div>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public int PagoId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authState { get; set; }

    private Pagos Pago { get; set; }

    private List<Clientes> Clientes = new List<Clientes>();
    private List<Ventas> Ventas = new List<Ventas>();

    private string nombreUsuarioCreacion { get; set; } = "";
    private string usuarioIdCreacion { get; set; } = "";

    private int VentaIdSeleccionado { get; set; }

    private decimal Balance { get; set; }
    private decimal Monto { get; set; }

    private bool Activacion { get; set; }

    protected override void OnInitialized()
    {
        Nuevo();
        BuscarParametro();
    }

    public void Nuevo()
    {
        Pago = new Pagos();

        Clientes = ClientesBLL.GetList(c => true);
        Ventas.Clear();

        VentaIdSeleccionado = 0;

        ReiniciarUsuarioCreacion();

        Balance = 0.0m;
        Monto = 0.0m;

        Activacion = false;
    }

    private async void ReiniciarUsuarioCreacion()
    {
        nombreUsuarioCreacion = (await authState).User.Identity.Name;

        usuarioIdCreacion = (await authState).User.Claims
            .Where(c => c.Type == ClaimTypes.NameIdentifier)
            .Select(c => c.Value).FirstOrDefault();
    }

    private void BuscarParametro()
    {
        if (PagoId > 0)
        {
            var encontrado = PagosBLL.Buscar(PagoId);

            if (encontrado != null)
            {
                this.Pago = encontrado;
                AsignarCliente();
                AsignarVenta();
                AsignarUsuarioCreacion();
                ObtenerBalance();
                Activacion = true;
            }
            else
                toast.ShowWarning("No encontrado");
        }
    }

    public void Buscar()
    {
        if (Pago.PagoId > 0)
        {
            var encontrado = PagosBLL.Buscar(Pago.PagoId);

            if (encontrado != null)
            {
                this.Pago = encontrado;
                AsignarCliente();
                AsignarVenta();
                AsignarUsuarioCreacion();
                ObtenerBalance();
                Activacion = true;
            }
            else
                toast.ShowWarning("No encontrado");
        }
    }

    private void AsignarCliente()
    {
        Clientes.Clear();
        var cliente = ClientesBLL.Buscar(Pago.ClienteId);
        Clientes.Add(cliente);
    }

    private void AsignarVenta()
    {
        Ventas.Clear();
        var venta = VentasBLL.Buscar(Pago.PagoDetalle[0].VentaId);
        Ventas.Add(venta);
        VentaIdSeleccionado = venta.VentaId;
    }

    private void AsignarUsuarioCreacion()
    {
        Usuarios usuarioCreacion = UsuariosBLL.Buscar(Pago.UsuarioId);

        nombreUsuarioCreacion = usuarioCreacion.NombreUsuario;
        usuarioIdCreacion = Pago.UsuarioId.ToString();
    }

    private void ObtenerVentas()
    {
        if (Pago.PagoId == 0)
        {
            Ventas = VentasBLL.GetList(v => v.ClienteId == Pago.ClienteId);

            if (Ventas == null)
                return;

            VentaIdSeleccionado = Ventas[0].VentaId;
            ObtenerBalance();
        }
    }

    private void ObtenerBalance()
    {
        Ventas venta = VentasBLL.Buscar(VentaIdSeleccionado);

        if(venta != null)
        {
            Balance = venta.Balance;

            if (Pago.PagoId == 0)
                Pago.PagoDetalle.Clear();
        }
    }

    public void AgregarDetalle()
    {
        if (VentaIdSeleccionado < 0)
        {
            toast.ShowInfo("Ingrese alguna venta");
            return;
        }

        if(Monto <= 0)
        {
            toast.ShowInfo("Ingrese algun monto");
            return;
        }

        if (Monto > Balance)
        {
            toast.ShowInfo("Ha excedido el pago posible");
            return;
        }

        Pago.PagoDetalle.Add(new PagosDetalle
        {
            PagoDetalleId = 0,
            PagoId = Pago.PagoId,
            VentaId = VentaIdSeleccionado,
            Monto = Monto,
            Saldo = 0
        });

        CalcularPago();

        Monto = 0.0m;
    }

    private void CalcularPago()
    {
        Ventas venta = VentasBLL.Buscar(Convert.ToInt32(VentaIdSeleccionado));

        Pago.Total = 0.0m;
        Balance = venta.Total;

        foreach(var item in Pago.PagoDetalle)
        {
            Pago.Total += item.Monto;
            Balance -= item.Monto;
            item.Saldo = Balance;
        }
    }

    public void RemoverFila(int index)
    {
        Pago.PagoDetalle.RemoveAt(index);
        CalcularPago();
    }

    public void Guardar()
    {
        bool guardo;

        if (Pago.PagoDetalle.Count < 1)
        {
            toast.ShowInfo("Debe ingresar algun monto");
            return;
        }

        if (!PagosBLL.VentaDisponible(Pago))
        {
            toast.ShowInfo("Ya ha sido utilizada esta VentaId");
            return;
        }

        Pago.UsuarioId = Convert.ToInt32(usuarioIdCreacion);
        Pago.FechaModificacion = DateTime.Now;


        guardo = PagosBLL.Guardar(Pago);

        if (guardo)
        {
            VentasBLL.RestarBalance(Pago.PagoDetalle[0].VentaId, Balance);
            Nuevo();
            toast.ShowSuccess("Guardado correctamente");
        }
        else
            toast.ShowError("No fue posible guardar");
    }

    public void Eliminar()
    {
        bool elimino;

        VentasBLL.RestablecerBalance(Pago.PagoId);
        elimino = PagosBLL.Eliminar(Pago.PagoId);

        if (elimino)
        {
            Nuevo();
            toast.ShowSuccess("Eliminado correctamente");
        }
        else
            toast.ShowError("No fue posible eliminar");
    }
}
